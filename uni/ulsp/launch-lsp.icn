#############################################################################################
#                                        Main.icn                                           #
#############################################################################################
# Authors: Mark Stowell, Jonah Schnettler
# Description:
#   -Entry point to unicon language server.
#   -Gathers and validates port number passed as argument to executable
#   -Instantiates Server class and calls run() to start server on validated port number.
#
import ulsp
link options
link basename
link ximage

procedure usage()
   local prog
   prog := basename(&progname)
   write("Usage: ", prog, " [options]\n")
   write(prog, " is an implementation of the language server protocol.")
   write("You are handling the socket parameters/options for your IDE incorrectly.")
   write("Check your IDE for the correct LSP server invocation.")
   write("\nOptions:")
   write("\t --socket <PORT> : set the lsp server port")
   write("\t -s : run as a server (default)")
   write("\t -c : run as a client")
   write("\t -h : show this help\n")
   exit(-1)
end

procedure validate_args(args)
   local opts
   opts := options(args, "--socket+ -h! -c! -s!", usage)
   if *opts = 0 then usage()
   member(opts, "-socket") | usage()
   return opts
end

procedure main(args)
   local opts, sock, mode

   # If validate_args() fails, it will display usage() and never return.
   opts := validate_args(args)

   # Allow passing full host:port as an arg
   sock := opts["-socket"]
   if &features == ("MacOS" | "MS Windows NT") then {
      sock := "127.0.0.1:" || sock
   }
   else {
      sock := ":" || sock
   }

   # Set mode for server to run in, based on opts.
   member(opts, mode := "c") | (mode := "s")

   Server(sock, mode).run()
end
